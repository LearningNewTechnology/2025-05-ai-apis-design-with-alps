
openapi: 3.1.0
info:
  title: Person Service API
  version: 1.0.0
  description: Person Service API profile for [RWMBook](http://b.mamund.com/rwmbook).

paths:
  /persons:
    get:
      tags: [Collection]
      summary: Filter the list of person records
      description: A safe idempotent action to filter the list of person records.
      operationId: filterPersons
      tags: [Collection]
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
          description: Email address associated with the person
        - name: familyName
          in: query
          required: false
          schema:
            type: string
          description: The family name of the person
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Status of the person record (active, inactive)
      responses:
        '200':
          description: A filtered list of person records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      tags: [Collection]
      summary: Create a new person record
      description: An unsafe non-idempotent action to create a new person record.
      operationId: createPerson
      tags: [Collection]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: Person record created successfully
        '400':
          description: Invalid input (e.g., missing required fields or bad data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

  /persons/{id}:
    get:
      tags: [Item]
      summary: Go to a single person record
      description: A safe idempotent action to go to a single person record.
      operationId: getPerson
      tags: [Item]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single person record
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    put:
      tags: [Item]
      summary: Update an existing person record
      description: An unsafe idempotent action to update an existing person record.
      operationId: updatePerson
      tags: [Item]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Person record updated successfully
        '400':
          description: Invalid update data
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      tags: [Item]
      summary: Remove an existing person record
      description: An unsafe idempotent action to remove an existing person record.
      operationId: deletePerson
      tags: [Item]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Person record deleted successfully

  /persons/{id}/status:
    patch:
      tags: [Status]
      summary: Change the status of an existing person record
      description: An unsafe idempotent action to change the status of an existing person record.
      operationId: changePersonStatus
      tags: [Item]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Status of the person record (active, inactive)
      responses:
        '200':
          description: Person status updated

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
          title: Id of the person record
          description: The Id of the person record.
          x-semantic: https://schema.org/identifier
          example: "12345"
        givenName:
          type: string
          title: The given name of the person
          description: The given name of the person
          x-semantic: https://schema.org/givenName
          example: "Jane"
        familyName:
          type: string
          title: The family name of the person
          description: The family name of the person
          x-semantic: https://schema.org/familyName
          example: "Doe"
        telephone:
          type: string
          title: Telephone associated with the person
          description: Telephone associated with the person
          x-semantic: https://schema.org/telephone
          example: "555-0102"
        email:
          type: string
          format: email
          title: Email address associated with the person
          description: Email address associated with the person
          x-semantic: https://schema.org/email
          example: "jane.doe@example.com"
        status:
          type: string
          title: Status of the person record (active, inactive)
          description: Status of the person record (active, inactive)
          x-semantic: https://schema.org/status
          example: "active"
      required:
        - id
        - givenName
        - familyName
